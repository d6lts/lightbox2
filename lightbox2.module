<?php
// $Id $
/**
 * Enables the use of lightbox V2 which places images above your current page, 
 * not within.
 * This frees you from the constraints of the layout, particularly column 
 * widths.
 * 
 * This module is for Drupal 5.x only.
 *
 * Module by: Mark Ashmead
 * Mailto: bugzie@gmail.com
 * Co-maintainer: Stella Power (http://drupal.org/user/66894)
 *
 * Image Node Support: Steve McKenzie
 *
 */

/**
 * GLOBAL VARIABLES
 */
$_LIGHTBOX2_INCLUDE = false;

/**
 * Displays the information for this module.
 * Displays the help text for this module.
 *
 */
/**
 * Implementation of hook_help().
 */
function lightbox2_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Enables Lightbox V2 for Drupal');
    case 'admin/help#lightbox2':
      return t('<h3>Overview</h3>
      <p align="justify">Lightbox JS V2 is a simple, unobtrusive script used to overlay images on the current page. It\'s a snap to setup and works on all modern browsers. The module comes with a Lightbox2 Lite option which does not use the JQuery libraries; it is therefore less likely to conflict with anything else.</p>
      <p align="justify">Places images above your current page, not within. This frees you from the constraints of the layout, particularly column widths. Keeps users on the same page. Clicking to view an image and then having to click the back button to return to your site is bad for continuity (and no fun!).</p>
      <p align="justify"><h3>Usage</h3></p>
      <p>Add rel=&quot;lightbox&quot; attribute to any link tag to activate the lightbox. For example: </p>
      <p>&lt;a href=&quot;image-1.jpg&quot; rel=&quot;lightbox&quot; title=&quot;my caption&quot;&gt;image #1&lt;/a&gt;</p>
      <p>Optional: Use the title attribute if you want to show a caption.</p>
   <p>If you have a set of related images that you would like to group, follow
   step one but additionally include a group name between square brackets in the
   rel attribute. For example:</p><p>&lt;a href="images/image-1.jpg"
   rel="lightbox[roadtrip]"&gt;image #1&lt;/a&gt;<br />
&lt;a href="images/image-2.jpg" rel="lightbox[roadtrip]"&gt;image
#2&lt;/a&gt;<br />
&lt;a href="images/image-3.jpg" rel="lightbox[roadtrip]"&gt;image
#3&lt;/a&gt;<br /></p>
<p>No limits to the number of image sets per page or how many images are allowed
in each set. Go nuts!</p>');
      break;
  }
}

/**
 * Implementation of hook_perm()
 * Define the permissions this module uses
 */
function lightbox2_perm() {
  return array('administer lightbox2');
}


/**
 * Implementation of hook_access()
 */
function lightbox2_access($op, $node) {
  return user_access('administer lightbox2');
}

/**
 * Implementation of hook_menu()
 */
function lightbox2_menu() {
  $items = array();

  $items['admin/settings/lightbox2'] = array(
    'title' => 'Lightbox2',
    'description' => 'Allows the user to configure the lightbox2 settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lightbox2_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer lightbox2'),
  );

  return $items;
}


/**
 * Implementation of hook_nodeapi().
 */
function lightbox2_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) { 
  global $_LIGHTBOX2_INCLUDE;
 
  if (lightbox2_exclude_these_paths() != 1) {
    if ($op == 'view' && !$_LIGHTBOX2_INCLUDE) {
      lightbox2_add_files();
      $_LIGHTBOX2_INCLUDE = true;
    }
    elseif ($node->type == 'image' && !$_LIGHTBOX2_INCLUDE) {
      lightbox2_add_files();
      $_LIGHTBOX2_INCLUDE = true;
    }
  }
}

/**
 * Implementation of hook_settings()
 */
function lightbox2_settings_form() {

  // add the javascript which disables / enables form elements
  drupal_add_js(drupal_get_path('module', 'lightbox2') .'/js/lightbox2.js', 'module');

  // Define Lightbox2 Lite fieldset.
  /* ------------------------------- */
  $use_lite = variable_get('lightbox2_lite', false);
  $form['lightbox2_lite_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Lightbox2 Lite'),
    '#collapsible' => TRUE, 
    '#collapsed' => !$use_lite,
  );

  // Add Checkbox for Lightbox2 Lite.
  $form['lightbox2_lite_options']['lightbox2_lite']  = array(
    '#type' => 'checkbox',
    '#title' => t('Use Lightbox2 Lite'),
    '#description' => t('Checking this box will enable Lightbox2 Lite and will disable all of the automatic image node URL re-formatting features.  It also disables all grouping features.'),
    '#default_value' => $use_lite,
  );


  // Define General settings fieldset.
  /* ---------------------------------- */
  $form['lightbox2_general_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  // Add text box for image count for grouping
  $form['lightbox2_general_options']['lightbox2_image_count_str'] = array(
    '#type' => 'textfield',
    '#title' => t('Image Count Text'),
    '#description' => t('This text is used to display the image count underneath the image in the lightbox when image grouping is enabled.  Use !current as a placeholder for the number of the current image and !total for the total number of images in the group.  For example, "Image !current of !total".'),
    '#default_value' => variable_get('lightbox2_image_count_str', 'Image !current of !total'),
  );

  // Add Checkbox for Zoom image
  $form['lightbox2_general_options']['lightbox2_disable_zoom'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable Zoom Feature'),
    '#description' => t('By default, when the image being displayed in the lightbox is larger than the browser window, it is resized to fit within the window and a zoom button is provided for users who wish to view the image in its original size.  Checking this box will disable this feature and all images will be displayed without any resizing.'),
    '#default_value' => variable_get('lightbox2_disable_zoom', false),
  );

  // Add Checkbox for Gallery2 Image Filter.
  $form['lightbox2_general_options']['lightbox2G2_filter']  = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Gallery 2 Filter'),
    '#description' => t('Checking this box will enable the Gallery 2 filter.'),
    '#default_value' => variable_get('lightbox2G2_filter', true),
  );

   // Add Textarea for urls without lightbox
  $form['lightbox2_general_options']['lightbox2_disable_these_urls']  = array(
    '#type' => 'textarea',
    '#title' => t('Disable LightBox for these urls'),
    '#description' => t('List the urls where the lightbox should be disabled, e.g. \"node/add/page\".  Use &lt;front&gt; to match the front page.  Put each url on a separate line. You can use the % character as a wildcard.'),
    '#default_value' => variable_get('lightbox2_disable_these_urls', ''),
  );


  // Define Image Node Options fieldset.
  /* ------------------------------- */
  $form['image_node_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Automatic image node options'),
    '#description' => t('These options allow automatic URL re-formatting of Image Nodes.  This removes the need for you to add \'rel="lightbox"\' to each image node link throughout your site.  Only image nodes which have the CSS classes "thumbnail" or "image-thumbnail" will have their URLs automatically re-formatted.  This feature is not available when using Lightbox2 Lite.'),
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );

  // Add Checkbox for Image Node.
  $form['image_node_options']['lightbox2_image_node']  = array(
    '#type' => 'checkbox',
    '#title' => t('Enable for Image Nodes'),
    '#description' => t('Checking this box will enable automatic URL formatting for Image Nodes.'),
    '#default_value' => variable_get('lightbox2_image_node', true),
  );

  // Add Checkbox for Image Node Grouping.
  $form['image_node_options']['lightbox2_image_group']  = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Grouping'),
    '#description' => t('Checking this box will enable automatic grouping of Image Nodes on a page. Useful for image galleries.'),
    '#default_value' => variable_get('lightbox2_image_group', true),
  );

  // Add text box for link text to node
  $form['image_node_options']['lightbox2_node_link_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Text for Node Link'),
    '#description' => t('This is the text that will appear as the link to the node underneath the image in the lightbox'),
    '#default_value' => variable_get('lightbox2_node_link_text', 'View Image Details'),
  );

  // Add Checkbox for disabling lightbox for gallery lists
  $form['image_node_options']['lightbox2_disable_nested_galleries']  = array(
    '#type' => 'checkbox',
    '#title' => t('Disable Lightbox for Gallery Lists'),
    '#description' => t('Checking this box will disable the lightbox for images in gallery lists.  This means it is possible to open a gallery by clicking on the teaser image, but the lightbox will still appear when viewing images within the gallery.'),
    '#default_value' => variable_get('lightbox2_disable_nested_galleries', true),
  );

  return system_settings_form($form);
}


/**
 *Implementation of hook_filter().
 */
function lightbox2_filter_tips($delta, $format, $long = false) {
  return t('Image links from G2 are formatted for use with Lightbox.V2');
}

// Check to see if the G2 Filter is Enabled in Settings
if (variable_get('lightbox2G2_filter', true)) {
  function lightbox2_filter($op, $delta = 0, $format = -1, $text = '') {
    switch ($op) {
      case 'list':
        return array(0 => t('Lightbox filter'));
      case 'description':
        return t('Turns g2_filter links into Lightbox.V2 appropriate links');
      case 'process':
        $text = ' '. $text .' ';
        $text = preg_replace('/ShowItem/', 'DownloadItem', $text);
        $text = preg_replace('/target=""/', 'rel="lightbox"', $text);
        $text = substr($text, 1, -1);
        return $text;
      default:
        return $text;
    }
  }
}
/**
 * Provides a link to the CSS stylesheet associated with this module.
 * Provides a link to the JS file associated with this module.
 */

function lightbox2_add_files() {

  // Load required js and css files.
  $path = drupal_get_path('module', 'lightbox2');

  // load the javascript settings
  $js_settings = array(
    'disable_zoom' => variable_get('lightbox2_disable_zoom', false),
    'group_images' => variable_get('lightbox2_image_group', true),
    'disable_for_gallery_lists' => variable_get('lightbox2_disable_nested_galleries', true),
    'node_link_text' => t(variable_get('lightbox2_node_link_text', 'View Image Details')),
    'image_count' => t(variable_get('lightbox2_image_count_str', 'Image !current of !total')),
  );
  drupal_add_js(array('lightbox2' => $js_settings), 'setting');


  // Lightbox2 Plus
  if (!variable_get('lightbox2_lite', false)) {
    $css = path_to_theme() .'/lightbox.css';
    if (!file_exists($css)) {
      $css = $path .'/css/lightbox.css';
    }
    if (function_exists('drupal_add_css')) {
      drupal_add_css($css);
    }
    else {
      theme('add_style', $css);
    }

    // Check to see if the Image Node Option is enabled in settings.
    if (variable_get('lightbox2_image_node', true)) {
      drupal_add_js($path .'/js/image_nodes.js');
    }
    drupal_add_js($path .'/js/lightbox.js');

  }
  // Lightbox Lite
  else {
    $css = path_to_theme() .'/lightbox_lite.css';
    if (!file_exists($css)) {
      $css = $path .'/css/lightbox_lite.css';
    }
    if (function_exists('drupal_add_css')) {
      drupal_add_css($css);
    }
    else {
      theme('add_style', $css);
    }
    drupal_add_js($path .'/js/lightbox_lite.js');
  }
  drupal_add_js($path .'/js/lightningload.js');
}

/**
 * Implementation of hook_field_formatter_info().
 * Adds certain lightbox+imagecache formatters to CCK image fields if the 
 * imagefield.module and the imagecache.module exist.
 */
function lightbox2_field_formatter_info() {
  $formatter = array();
  if (module_exists('imagefield') && module_exists('imagecache')) {
    $rules = _imagecache_get_presets();
    foreach ($rules as $ruleid => $rulename) {
      $formatters['lightbox2]['. $rulename] = array(
        'label' => 'Lightbox2: '. $rulename,
        'field types' => array('image'),
      );
    }
  }

  return $formatters;
}


/**
 * Implementation of hook_field_formatter().
 */
function lightbox2_field_formatter($field, $item, $formatter) {
  if (module_exists('imagefield') && module_exists('imagecache')) {
    if (!isset($item['fid'])) {
      return '';
    }
    if (!$_LIGHTBOX2_INCLUDE && lightbox2_exclude_these_paths() != 1) {
      lightbox2_add_files();
      $_LIGHTBOX2_INCLUDE = true;
    }
    $file = _imagefield_file_load($item['fid']);
    $item = array_merge($item, $file);
    if (strpos($formatter, 'lightbox2][') !== false) {
      list($null, $namespace) = explode('][', $formatter, 2);
      $rules = _imagecache_get_presets();
      if (in_array($namespace, (array) $rules)) {
        return theme('imagefield_image_imagecache_lightbox2', $namespace, $field, $item);
      }
    }
  }
}

/**
 * Implementation of hook_theme()
 */
function lightbox2_theme() {
  return array(
    'imagefield_image_imagecache_lightbox2' => array(
      'function' => 'imagefield_image_imagecache_lightbox2',
      'arguments' => array('namespace' => NULL, 'field' => NULL, 'item' => NULL, 'attributes' => NULL),
    ),
  );
}

/**
 * Implementation of theme_imagefield_image_imagecache_lightbox2().
 */
function theme_imagefield_image_imagecache_lightbox2($namespace, $field, $item, $attributes = NULL) {

  $imagecache_path = file_create_url(
    file_directory_path() .'/imagecache/'. $namespace .'/'. $item['filepath']);


  $rel = 'lightbox';
  if (variable_get('lightbox2_image_group', TRUE)) {
    $rel = 'lightbox[cck_image_nodes]';
  }

  $node_link = '';
  if (!empty($item['nid'])) {
    $node_link = '<br /><br />'. l(t('View Image Information'), 'node/'. $item['nid']);
  }

  $link_attributes = array(
    'rel' => $rel,
    'title' => $item['alt'] . $node_link);

  $image = theme('imagecache', $namespace, $item['filepath'], $item['alt'], $item['title'], $attributes);
  $output = l($image, $item['filepath'], array('attributes' => $link_attributes, 'query' => NULL, 'fragment' => NULL, 'absolute' => FALSE, 'html' => TRUE));

  return $output;
}

function lightbox2_exclude_these_paths() {

  # use lightbox if this url is not excluded
  $disabled_urls = variable_get('lightbox2_disable_these_urls', '');

  if (!empty($disabled_urls)) {
    $urls = explode("\n", $disabled_urls);

    foreach ($urls as $url) {
      $url = rtrim($url);
      if ($url == "<front>") {
        $url = "";
      }
      $url = preg_replace("/%/", '.*?', preg_quote($url, '/'));
      $pattern = "/^". $url ."$/";
      if (preg_match($pattern, $_REQUEST['q'])) {
        return 1;
      }
    }
  }

  return 0;
}
